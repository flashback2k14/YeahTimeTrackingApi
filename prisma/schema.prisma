generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  pwHash         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  actions        Action[]
  actionGroups   ActionGroup[]
  activeTasks    ActiveTask[]
  authentication Authentication?
  tasks          Task[]
}

model Authentication {
  id        String   @id @default(uuid())
  apiToken  String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ActionGroup {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actions   Action[]
  user      User     @relation(fields: [userId], references: [id])
}

model Action {
  id            String      @id @default(uuid())
  name          String      @unique
  type          String      @unique
  userId        String
  actionGroupId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  actionGroup   ActionGroup @relation(fields: [actionGroupId], references: [id])
}

model ActiveTask {
  id        String   @id @default(uuid())
  type      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id            String   @id @default(uuid())
  state         String
  type          String   @unique
  durationInSec Int?
  comment       String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}
